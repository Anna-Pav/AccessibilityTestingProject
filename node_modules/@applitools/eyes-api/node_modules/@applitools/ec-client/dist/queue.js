"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeQueue = void 0;
const abort_controller_1 = require("abort-controller");
const utils = __importStar(require("@applitools/utils"));
function makeQueue({ logger }) {
    const pool = [];
    const map = new Map();
    let corked = false;
    return {
        get corked() {
            return corked;
        },
        run,
        cancel,
        cork,
        uncork,
    };
    async function run(task) {
        const handle = {};
        handle.running = false;
        handle.start = async () => {
            if (handle.running)
                return;
            handle.running = true;
            handle.controller = new abort_controller_1.AbortController();
            try {
                const result = await task(handle.controller.signal);
                if (handle.running) {
                    map.delete(task);
                    pool.splice(pool.indexOf(handle), 1);
                    handle.resolve(result);
                }
            }
            catch (error) {
                if (handle.running || !utils.types.instanceOf(error, 'AbortError'))
                    handle.reject(error);
            }
            finally {
                return handle.promise;
            }
        };
        handle.abort = () => {
            if (!handle.running)
                return;
            handle.running = false;
            handle.controller.abort();
        };
        handle.promise = new Promise((resolve, reject) => {
            handle.resolve = resolve;
            handle.reject = reject;
        });
        pool.push(handle);
        map.set(task, handle);
        logger.log('Task was added to the queue');
        if (!corked)
            handle.start();
        return handle.promise;
    }
    function cancel(task) {
        const handle = map.get(task);
        if (!(handle === null || handle === void 0 ? void 0 : handle.running))
            return;
        handle.abort();
        map.delete(task);
        pool.splice(pool.indexOf(handle), 1);
        logger.log('Task was cancelled');
    }
    function cork() {
        if (corked)
            return;
        corked = true;
        pool.slice(1).forEach(handle => handle.abort());
        logger.log('Queue was corked');
    }
    function uncork() {
        if (!corked)
            return;
        corked = false;
        pool.forEach(handle => handle.start());
        logger.log('Queue was uncorked');
    }
}
exports.makeQueue = makeQueue;
