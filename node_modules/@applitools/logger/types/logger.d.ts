import { type Handler } from './handler';
import { type ConsoleHandler } from './handler-console';
import { type FileHandler } from './handler-file';
import { type RollingFileHandler } from './handler-rolling-file';
import { type DebugHandler } from './handler-debug';
import { type Printer, type PrinterOptions } from './printer';
import { type LogLevelName } from './log-level';
import { type ColoringOptions } from './format';
export type LoggerOptions = Omit<Partial<PrinterOptions>, 'handler' | 'level' | 'colors'> & {
    handler?: ConsoleHandler | FileHandler | RollingFileHandler | DebugHandler | Handler;
    level?: LogLevelName | number;
    colors?: boolean | ColoringOptions;
    console?: boolean | Handler;
};
export type ExtendOptions = Omit<LoggerOptions, 'handler'>;
export interface Logger extends Printer {
    isLogger: true;
    console: Printer;
    tag(name: string, value: any): void;
    extend(options?: ExtendOptions): Logger;
    open(): void;
    close(): void;
}
export declare function makeLogger({ handler, label, tags, timestamp, level, colors, format, console, extended, }?: LoggerOptions & {
    extended?: boolean;
}): Logger;
