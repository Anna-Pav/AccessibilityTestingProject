"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils = __importStar(require("@applitools/utils"));
const configParams_1 = __importDefault(require("./configParams"));
const DEFAULT_TEST_CONCURRENCY = 5;
const uuid = __importStar(require("uuid"));
function makeConfig() {
    const config = utils.config.getConfig({
        params: [
            ...configParams_1.default,
            'failCypressOnDiff',
            'tapDirPath',
            'tapFileName',
            'disableBrowserFetching',
            'testConcurrency',
            'removeDuplicateTests',
            'eyesFetchConcurrency',
            'universalDebug',
        ],
    });
    if ((!config.batch || !config.batch.id) && !config.batchId) {
        config.batch = { id: uuid.v4(), ...config.batch };
    }
    if (config.failCypressOnDiff === '0') {
        config.failCypressOnDiff = false;
    }
    if (utils.types.isString(config.showLogs)) {
        config.showLogs = config.showLogs === 'true' || config.showLogs === '1';
    }
    if (utils.types.isString(config.testConcurrency)) {
        config.testConcurrency = Number(config.testConcurrency);
    }
    if (config.accessibilityValidation) {
        config.accessibilitySettings = config.accessibilityValidation;
        delete config.accessiblityValidation;
    }
    const eyesConfig = {
        tapDirPath: config.tapDirPath,
        tapFileName: config.tapFileName,
        eyesIsDisabled: !!config.isDisabled,
        eyesBrowser: JSON.stringify(config.browser),
        eyesLayoutBreakpoints: JSON.stringify(config.layoutBreakpoints),
        eyesFailCypressOnDiff: config.failCypressOnDiff === undefined ? true : !!config.failCypressOnDiff,
        eyesDisableBrowserFetching: !!config.disableBrowserFetching,
        eyesTestConcurrency: config.testConcurrency || DEFAULT_TEST_CONCURRENCY,
        eyesWaitBeforeCapture: config.waitBeforeCapture,
        eyesRemoveDuplicateTests: !!config.removeDuplicateTests,
        universalDebug: !!config.universalDebug,
    };
    return { config, eyesConfig };
}
exports.default = makeConfig;
