"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const errorDigest_1 = __importDefault(require("./errorDigest"));
const logger_1 = require("@applitools/logger");
const getErrorsAndDiffs_1 = __importDefault(require("./getErrorsAndDiffs"));
const fs_1 = __importDefault(require("fs"));
const core_1 = require("@applitools/core");
const path_1 = require("path");
function printTestResults(testResultsArr) {
    const logger = (0, logger_1.makeLogger)({
        level: testResultsArr.resultConfig.showLogs ? 'info' : 'silent',
        label: 'eyes',
    });
    if (!testResultsArr.testResults)
        return;
    const { passed, failed, diffs } = (0, getErrorsAndDiffs_1.default)(testResultsArr.testResults);
    if ((failed.length || diffs.length) && !!testResultsArr.resultConfig.eyesFailCypressOnDiff) {
        throw new Error((0, errorDigest_1.default)({
            passed,
            failed,
            diffs,
            logger,
            isInteractive: !testResultsArr.resultConfig.isTextTerminal,
        }));
    }
}
function handleBatchResultsFile(results, tapFileConfig) {
    const fileName = tapFileConfig.tapFileName || `${new Date().toISOString()}-eyes.tap`;
    const tapFile = (0, path_1.resolve)(tapFileConfig.tapDirPath, fileName);
    return fs_1.default.writeFile(tapFile, core_1.formatters.toHierarchicTAPString(results, { includeSubTests: false, markNewAsPassed: true }), {}, (err) => {
        if (err)
            throw err;
    });
}
exports.default = { printTestResults, handleBatchResultsFile };
