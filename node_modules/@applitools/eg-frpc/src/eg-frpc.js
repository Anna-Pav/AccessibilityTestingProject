const fs = require('fs')
const crypto = require('crypto')

const frpcVersion = '0.45.0.1'

module.exports = {frpcVersion, getExpectedBinHash, getBinHash, getSupportedPlatformAndArchList}

const supportedPlatformAndArch = [
  {
    platform: 'win32',
    arch: 'x64',
  },
  {
    platform: 'darwin',
    arch: 'x64',
  },
  {
    platform: 'darwin',
    arch: 'arm64',
  },
  {
    platform: 'linux',
    arch: 'x64',
  },
  {
    platform: 'linux',
    arch: 'arm64',
  },
]

const binHashMap = new Map()
binHashMap.set('darwin_x64', '+RP+HSFGWPsH9OOqW+lzxQZwP3kuZz4PUd0m7ZIFfmU=')
binHashMap.set('darwin_arm64', 'DC9PAeRsLMxXfmZ1TlRF/h6q8rWjATByTgMCuRZTe+A=')
binHashMap.set('linux_x64', 'AW+qGA7k6YvR08tPlPMVadq1fwju3206WMaAJUVv1jQ=')
binHashMap.set('linux_arm64', 'J8l3SM2J7o1QyV5E4ZmvpBEALs1cv8DQgzTM1A5klyI=')
binHashMap.set('win32_x64', 'QtFFEk8Xvo37H2+oAzVgRLlsNX4U1qABRaKpDhyRwyA=')

function getExpectedBinHash({platform, arch}) {
  const key = `${platform}_${arch}`
  return binHashMap.has(key) ? binHashMap.get(key) : undefined
}

function getSupportedPlatformAndArchList() {
  return supportedPlatformAndArch
}

async function getBinHash(frpcBinPath) {
  const hash = crypto.createHash('sha256')
  const buffer = await fs.promises.readFile(frpcBinPath)
  const actualHash = hash.update(buffer).digest('base64')

  return actualHash
}
