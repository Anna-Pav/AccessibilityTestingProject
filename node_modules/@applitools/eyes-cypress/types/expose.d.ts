export type MaybeArray<T> = T | Array<T>;
export type EyesSelector<TSelector = never> = string | TSelector | { selector: string | TSelector; type?: string; shadow?: EyesSelector<TSelector>; frame?: EyesSelector<TSelector>; };
export enum TestResultsStatus {
    Passed = 'Passed',
    Unresolved = 'Unresolved',
    Failed = 'Failed'
}
export enum DeviceName {
    Blackberry_PlayBook = 'Blackberry PlayBook',
    BlackBerry_Z30 = 'BlackBerry Z30',
    Galaxy_A5 = 'Galaxy A5',
    Galaxy_Note_10 = 'Galaxy Note 10',
    Galaxy_Note_10_Plus = 'Galaxy Note 10 Plus',
    Galaxy_Note_2 = 'Galaxy Note 2',
    Galaxy_Note_3 = 'Galaxy Note 3',
    Galaxy_Note_4 = 'Galaxy Note 4',
    Galaxy_Note_8 = 'Galaxy Note 8',
    Galaxy_Note_9 = 'Galaxy Note 9',
    Galaxy_S3 = 'Galaxy S3',
    Galaxy_S5 = 'Galaxy S5',
    Galaxy_S8 = 'Galaxy S8',
    Galaxy_S8_Plus = 'Galaxy S8 Plus',
    Galaxy_S9 = 'Galaxy S9',
    Galaxy_S9_Plus = 'Galaxy S9 Plus',
    Galaxy_S10 = 'Galaxy S10',
    Galaxy_S10_Plus = 'Galaxy S10 Plus',
    Galaxy_S20 = 'Galaxy S20',
    Galaxy_S22 = 'Galaxy S22',
    Galaxy_Tab_S7 = 'Galaxy Tab S7',
    iPad = 'iPad',
    iPad_6th_Gen = 'iPad 6th Gen',
    iPad_7th_Gen = 'iPad 7th Gen',
    iPad_Air_2 = 'iPad Air 2',
    iPad_Mini = 'iPad Mini',
    iPad_Pro = 'iPad Pro',
    iPhone_11 = 'iPhone 11',
    iPhone_11_Pro = 'iPhone 11 Pro',
    iPhone_11_Pro_Max = 'iPhone 11 Pro Max',
    iPhone_4 = 'iPhone 4',
    iPhone_5SE = 'iPhone 5/SE',
    iPhone_6_7_8 = 'iPhone 6/7/8',
    iPhone_6_7_8_Plus = 'iPhone 6/7/8 Plus',
    iPhone_X = 'iPhone X',
    iPhone_XR = 'iPhone XR',
    iPhone_XS = 'iPhone XS',
    iPhone_XS_Max = 'iPhone XS Max',
    Kindle_Fire_HDX = 'Kindle Fire HDX',
    Laptop_with_HiDPI_screen = 'Laptop with HiDPI screen',
    Laptop_with_MDPI_screen = 'Laptop with MDPI screen',
    Laptop_with_touch = 'Laptop with touch',
    LG_G6 = 'LG G6',
    LG_Optimus_L70 = 'LG Optimus L70',
    Microsoft_Lumia_550 = 'Microsoft Lumia 550',
    Microsoft_Lumia_950 = 'Microsoft Lumia 950',
    Nexus_10 = 'Nexus 10',
    Nexus_4 = 'Nexus 4',
    Nexus_5 = 'Nexus 5',
    Nexus_5X = 'Nexus 5X',
    Nexus_6 = 'Nexus 6',
    Nexus_6P = 'Nexus 6P',
    Nexus_7 = 'Nexus 7',
    Nokia_Lumia_520 = 'Nokia Lumia 520',
    Nokia_N9 = 'Nokia N9',
    OnePlus_7T = 'OnePlus 7T',
    OnePlus_7T_Pro = 'OnePlus 7T Pro',
    Pixel_2 = 'Pixel 2',
    Pixel_2_XL = 'Pixel 2 XL',
    Pixel_3 = 'Pixel 3',
    Pixel_3_XL = 'Pixel 3 XL',
    Pixel_4 = 'Pixel 4',
    Pixel_4_XL = 'Pixel 4 XL',
    Pixel_5 = 'Pixel 5',
    Sony_Xperia_10_II = 'Sony Xperia 10 II',
    Huawei_Mate_50_Pro = 'Huawei Mate 50 Pro',
    Huawei_Matepad_11 = 'Huawei Matepad 11'
}
export type ScreenOrientationPlain = "landscape" | "portrait";
export type LegacyRegion = { left: number; top: number; width: number; height: number; };
export type Selector = string | { selector: string; type?: "css" | "xpath"; nodeType?: "element" | "shadow-root"; };
export type Element = HTMLElement | JQuery;
export type ElementWithOptions = { element: Element; regionId?: string; padding?: any; };
export type SelectorWithOptions = { region: Selector; regionId?: string; padding?: number | LegacyRegion; };
export type AccessibilityValidation = { level?: "AA" | "AAA"; guidelinesVersion?: "WCAG_2_0" | "WCAG_2_1"; };
export type FloatingRegion = ((LegacyRegion | Selector | ElementWithOptions | SelectorWithOptions) & { maxUpOffset?: number; maxDownOffset?: number; maxLeftOffset?: number; maxRightOffset?: number; }) | Array<(LegacyRegion | Selector | ElementWithOptions | SelectorWithOptions) & { maxUpOffset?: number; maxDownOffset?: number; maxLeftOffset?: number; maxRightOffset?: number; }>;
export type accessibilityRegion = ((LegacyRegion | Selector | ElementWithOptions) & { accessibilityType?: "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject"; }) | { region: { selector: Selector; accessibilityType: "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject"; }; regionId?: string; padding?: number | LegacyRegion; } | Array<((LegacyRegion | Selector | ElementWithOptions) & { accessibilityType?: "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject"; }) | { region: { selector: Selector; accessibilityType: "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject"; }; regionId?: string; padding?: number | LegacyRegion; }>;
export type CypressCheckSettings = {
    name?: string;
    region?: LegacyRegion;
    matchLevel?: "None" | "Layout1" | "Layout" | "Layout2" | "Content" | "IgnoreColors" | "Strict" | "Exact";
    useDom?: boolean;
    sendDom?: boolean;
    enablePatterns?: boolean;
    ignoreDisplacements?: boolean;
    ignoreMismatch?: boolean;
    ignoreCaret?: boolean;
    ignoreRegions?: Array<({
        x: number;
        y: number;
        width: number;
        height: number;
    } | (Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; }))) | { region: {
        x: number;
        y: number;
        width: number;
        height: number;
    } | (Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; })); padding?: number | { top: number; bottom: number; left: number; right: number; }; regionId?: string; }>;
    layoutRegions?: Array<({
        x: number;
        y: number;
        width: number;
        height: number;
    } | (Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; }))) | { region: {
        x: number;
        y: number;
        width: number;
        height: number;
    } | (Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; })); padding?: number | { top: number; bottom: number; left: number; right: number; }; regionId?: string; }>;
    strictRegions?: Array<({
        x: number;
        y: number;
        width: number;
        height: number;
    } | (Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; }))) | { region: {
        x: number;
        y: number;
        width: number;
        height: number;
    } | (Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; })); padding?: number | { top: number; bottom: number; left: number; right: number; }; regionId?: string; }>;
    contentRegions?: Array<({
        x: number;
        y: number;
        width: number;
        height: number;
    } | (Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; }))) | { region: {
        x: number;
        y: number;
        width: number;
        height: number;
    } | (Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; })); padding?: number | { top: number; bottom: number; left: number; right: number; }; regionId?: string; }>;
    floatingRegions?: Array<({
        x: number;
        y: number;
        width: number;
        height: number;
    } | (Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; }))) | {
        region: {
            x: number;
            y: number;
            width: number;
            height: number;
        } | (Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; }));
        padding?: number | { top: number; bottom: number; left: number; right: number; };
        regionId?: string;
        offset?: { top?: number; bottom?: number; left?: number; right?: number; };
    } | {
        region: {
            x: number;
            y: number;
            width: number;
            height: number;
        } | (Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; }));
        padding?: number | { top: number; bottom: number; left: number; right: number; };
        regionId?: string;
        maxUpOffset?: number;
        maxDownOffset?: number;
        maxLeftOffset?: number;
        maxRightOffset?: number;
    }>;
    accessibilityRegions?: Array<({
        x: number;
        y: number;
        width: number;
        height: number;
    } | (Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; }))) | {
        region: {
            x: number;
            y: number;
            width: number;
            height: number;
        } | (Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; }));
        padding?: number | { top: number; bottom: number; left: number; right: number; };
        regionId?: string;
        type?: "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject";
    }>;
    pageId?: string;
    variationGroupId?: string;
    densityMetrics?: { scaleRatio?: number; xdpi?: number; ydpi?: number; };
    frames?: Array<{ frame: number | (Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; })); scrollRootElement?: Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; }); } | (number | (Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; })))>;
    webview?: string | boolean;
    scrollRootElement?: Element | (Selector | { selector: Selector; type?: string; shadow?: EyesSelector<Selector>; frame?: EyesSelector<Selector>; });
    fully?: boolean;
    disableBrowserFetching?: boolean;
    layoutBreakpoints?: boolean | Array<number>;
    visualGridOptions?: { [key: string]: any; };
    nmgOptions?: { [key: string]: any; };
    hooks?: { beforeCaptureScreenshot: string; };
    renderId?: string;
    timeout?: number;
    waitBeforeCapture?: number;
    lazyLoad?: boolean | { scrollLength?: number; waitingTime?: number; maxAmountToScroll?: number; };
    tag?: string;
    target?: "window" | "region";
    selector?: Selector;
    element?: Element;
    ignore?: MaybeArray<string | HTMLElement | JQuery | LegacyRegion | { selector: string; type?: "css" | "xpath"; nodeType?: "element" | "shadow-root"; } | ElementWithOptions | SelectorWithOptions>;
    layout?: MaybeArray<string | HTMLElement | JQuery | LegacyRegion | { selector: string; type?: "css" | "xpath"; nodeType?: "element" | "shadow-root"; } | ElementWithOptions | SelectorWithOptions>;
    content?: MaybeArray<string | HTMLElement | JQuery | LegacyRegion | { selector: string; type?: "css" | "xpath"; nodeType?: "element" | "shadow-root"; } | ElementWithOptions | SelectorWithOptions>;
    strict?: MaybeArray<string | HTMLElement | JQuery | LegacyRegion | { selector: string; type?: "css" | "xpath"; nodeType?: "element" | "shadow-root"; } | ElementWithOptions | SelectorWithOptions>;
    floating?: FloatingRegion;
    accessibility?: accessibilityRegion;
    scriptHooks?: { beforeCaptureScreenshot: string; };
    browser?: MaybeArray<{ name?: "chrome" | "firefox" | "edge" | "chrome-one-version-back" | "chrome-two-versions-back" | "firefox-one-version-back" | "firefox-two-versions-back" | "ie" | "ie10" | "edgechromium" | "edgelegacy" | "edgechromium-one-version-back" | "edgechromium-two-versions-back" | "safari" | "safari-earlyaccess" | "safari-one-version-back" | "safari-two-versions-back"; width: number; height: number; } | { chromeEmulationInfo: { deviceName: "Blackberry PlayBook" | "BlackBerry Z30" | "Galaxy A5" | "Galaxy Note 10" | "Galaxy Note 10 Plus" | "Galaxy Note 2" | "Galaxy Note 3" | "Galaxy Note 4" | "Galaxy Note 8" | "Galaxy Note 9" | "Galaxy S3" | "Galaxy S5" | "Galaxy S8" | "Galaxy S8 Plus" | "Galaxy S9" | "Galaxy S9 Plus" | "Galaxy S10" | "Galaxy S10 Plus" | "Galaxy S20" | "Galaxy S22" | "Galaxy Tab S7" | "iPad" | "iPad 6th Gen" | "iPad 7th Gen" | "iPad Air 2" | "iPad Mini" | "iPad Pro" | "iPhone 11" | "iPhone 11 Pro" | "iPhone 11 Pro Max" | "iPhone 4" | "iPhone 5/SE" | "iPhone 6/7/8" | "iPhone 6/7/8 Plus" | "iPhone X" | "iPhone XR" | "iPhone XS" | "iPhone XS Max" | "Kindle Fire HDX" | "Laptop with HiDPI screen" | "Laptop with MDPI screen" | "Laptop with touch" | "LG G6" | "LG Optimus L70" | "Microsoft Lumia 550" | "Microsoft Lumia 950" | "Nexus 10" | "Nexus 4" | "Nexus 5" | "Nexus 5X" | "Nexus 6" | "Nexus 6P" | "Nexus 7" | "Nokia Lumia 520" | "Nokia N9" | "OnePlus 7T" | "OnePlus 7T Pro" | "Pixel 2" | "Pixel 2 XL" | "Pixel 3" | "Pixel 3 XL" | "Pixel 4" | "Pixel 4 XL" | "Pixel 5" | "Sony Xperia 10 II" | "Huawei Mate 50 Pro" | "Huawei Matepad 11"; screenOrientation?: ScreenOrientationPlain; }; } | { iosDeviceInfo: { deviceName: "iPhone 11" | "iPhone 11 Pro" | "iPhone 11 Pro Max" | "iPhone X" | "iPhone XR" | "iPhone 14 Pro Max" | "iPhone 14" | "iPhone 13 Pro Max" | "iPhone 13 Pro" | "iPhone 13" | "iPhone 12 Pro Max" | "iPhone 12 Pro" | "iPhone 12" | "iPhone 12 mini" | "iPhone Xs" | "iPhone 8" | "iPhone 8 Plus" | "iPhone 7" | "iPhone SE (1st generation)" | "iPad Pro (12.9-inch) (3rd generation)" | "iPad Pro (11-inch) (4th generation)" | "iPad (7th generation)" | "iPad (9th generation)" | "iPad Air (2nd generation)" | "iPad Air (4th generation)"; iosVersion?: "latest" | "latest-1"; screenOrientation?: ScreenOrientationPlain; }; } | { androidDeviceInfo: { deviceName: "Galaxy Note 10" | "Galaxy Note 10 Plus" | "Galaxy S10" | "Galaxy S10 Plus" | "Galaxy S20" | "Galaxy S22" | "Galaxy Tab S7" | "Pixel 3 XL" | "Pixel 4" | "Pixel 4 XL" | "Pixel 5" | "Sony Xperia 10 II" | "Pixel 6" | "Galaxy S20 Plus" | "Galaxy S21" | "Galaxy S21 Plus" | "Galaxy S21 Ultra" | "Galaxy S22 Plus" | "Galaxy Tab S8" | "Xiaomi Redmi Note 10 JE" | "Xiaomi Redmi Note 11" | "Xiaomi Redmi Note 11 Pro" | "Sony Xperia 1 II" | "Sony Xperia Ace II" | "Huawei P30 Lite"; version?: "latest" | "latest-1"; screenOrientation?: ScreenOrientationPlain; }; } | { deviceName: DeviceName; screenOrientation?: ScreenOrientationPlain; name?: string; }>;
};
export type CypressEyesConfig = {
    debugScreenshots?: { save: boolean; path?: string; prefix?: string; };
    agentId?: string;
    apiKey?: string;
    serverUrl?: string;
    proxy?: { url: string; username?: string; password?: string; };
    autProxy?: {
        url: string;
        username?: string;
        password?: string;
        mode?: "Allow" | "Block";
        domains?: Array<string>;
    };
    isDisabled?: boolean;
    connectionTimeout?: number;
    removeSession?: boolean;
    appName?: string;
    testName?: string;
    displayName?: string;
    viewportSize?: { width: number; height: number; };
    sessionType?: "SEQUENTIAL" | "PROGRESSION";
    properties?: Array<{ name: string; value: string; }>;
    batch?: {
        id?: string;
        name?: string;
        sequenceName?: string;
        startedAt?: string | Date;
        notifyOnCompletion?: boolean;
        properties?: Array<{ name: string; value: string; }>;
    };
    defaultMatchSettings?: {
        exact?: { minDiffIntensity: number; minDiffWidth: number; minDiffHeight: number; matchThreshold: number; };
        matchLevel?: "None" | "Layout1" | "Layout" | "Layout2" | "Content" | "IgnoreColors" | "Strict" | "Exact";
        ignoreCaret?: boolean;
        useDom?: boolean;
        enablePatterns?: boolean;
        ignoreDisplacements?: boolean;
        ignoreRegions?: Array<{
            x: number;
            y: number;
            width: number;
            height: number;
        }>;
        layoutRegions?: Array<{
            x: number;
            y: number;
            width: number;
            height: number;
        }>;
        strictRegions?: Array<{
            x: number;
            y: number;
            width: number;
            height: number;
        }>;
        contentRegions?: Array<{
            x: number;
            y: number;
            width: number;
            height: number;
        }>;
        floatingRegions?: Array<{
            x: number;
            y: number;
            width: number;
            height: number;
        } | {
            region: {
                x: number;
                y: number;
                width: number;
                height: number;
            };
            maxUpOffset?: number;
            maxDownOffset?: number;
            maxLeftOffset?: number;
            maxRightOffset?: number;
        }>;
        accessibilityRegions?: Array<{
            x: number;
            y: number;
            width: number;
            height: number;
        } | { region: {
            x: number;
            y: number;
            width: number;
            height: number;
        }; type?: "IgnoreContrast" | "RegularText" | "LargeText" | "BoldText" | "GraphicalObject"; }>;
        accessibilitySettings?: AccessibilityValidation;
    };
    hostApp?: string;
    hostOS?: string;
    hostAppInfo?: string;
    hostOSInfo?: string;
    deviceInfo?: string;
    baselineEnvName?: string;
    environmentName?: string;
    branchName?: string;
    parentBranchName?: string;
    baselineBranchName?: string;
    compareWithParentBranch?: boolean;
    ignoreBaseline?: boolean;
    ignoreGitMergeBase?: boolean;
    saveFailedTests?: boolean;
    saveNewTests?: boolean;
    saveDiffs?: boolean;
    dontCloseBatches?: boolean;
    sendDom?: boolean;
    matchTimeout?: number;
    forceFullPageScreenshot?: boolean;
    waitBeforeScreenshots?: number;
    stitchMode?: "Scroll" | "CSS" | "Resize";
    hideScrollbars?: boolean;
    hideCaret?: boolean;
    stitchOverlap?: number;
    scrollRootElement?: Element | EyesSelector<Selector>;
    cut?: { top: number; right: number; bottom: number; left: number; } | { x: number; y: number; width: number; height: number; };
    rotation?: 0 | 270 | -270 | 180 | -180 | 90 | -90;
    scaleRatio?: number;
    waitBeforeCapture?: number;
    concurrentSessions?: number;
    browsersInfo?: Array<{ name?: "chrome" | "firefox" | "edge" | "chrome-one-version-back" | "chrome-two-versions-back" | "firefox-one-version-back" | "firefox-two-versions-back" | "ie" | "ie10" | "edgechromium" | "edgelegacy" | "edgechromium-one-version-back" | "edgechromium-two-versions-back" | "safari" | "safari-earlyaccess" | "safari-one-version-back" | "safari-two-versions-back"; width: number; height: number; } | { chromeEmulationInfo: { deviceName: "Blackberry PlayBook" | "BlackBerry Z30" | "Galaxy A5" | "Galaxy Note 10" | "Galaxy Note 10 Plus" | "Galaxy Note 2" | "Galaxy Note 3" | "Galaxy Note 4" | "Galaxy Note 8" | "Galaxy Note 9" | "Galaxy S3" | "Galaxy S5" | "Galaxy S8" | "Galaxy S8 Plus" | "Galaxy S9" | "Galaxy S9 Plus" | "Galaxy S10" | "Galaxy S10 Plus" | "Galaxy S20" | "Galaxy S22" | "Galaxy Tab S7" | "iPad" | "iPad 6th Gen" | "iPad 7th Gen" | "iPad Air 2" | "iPad Mini" | "iPad Pro" | "iPhone 11" | "iPhone 11 Pro" | "iPhone 11 Pro Max" | "iPhone 4" | "iPhone 5/SE" | "iPhone 6/7/8" | "iPhone 6/7/8 Plus" | "iPhone X" | "iPhone XR" | "iPhone XS" | "iPhone XS Max" | "Kindle Fire HDX" | "Laptop with HiDPI screen" | "Laptop with MDPI screen" | "Laptop with touch" | "LG G6" | "LG Optimus L70" | "Microsoft Lumia 550" | "Microsoft Lumia 950" | "Nexus 10" | "Nexus 4" | "Nexus 5" | "Nexus 5X" | "Nexus 6" | "Nexus 6P" | "Nexus 7" | "Nokia Lumia 520" | "Nokia N9" | "OnePlus 7T" | "OnePlus 7T Pro" | "Pixel 2" | "Pixel 2 XL" | "Pixel 3" | "Pixel 3 XL" | "Pixel 4" | "Pixel 4 XL" | "Pixel 5" | "Sony Xperia 10 II" | "Huawei Mate 50 Pro" | "Huawei Matepad 11"; screenOrientation?: ScreenOrientationPlain; }; } | { iosDeviceInfo: { deviceName: "iPhone 11" | "iPhone 11 Pro" | "iPhone 11 Pro Max" | "iPhone X" | "iPhone XR" | "iPhone 14 Pro Max" | "iPhone 14" | "iPhone 13 Pro Max" | "iPhone 13 Pro" | "iPhone 13" | "iPhone 12 Pro Max" | "iPhone 12 Pro" | "iPhone 12" | "iPhone 12 mini" | "iPhone Xs" | "iPhone 8" | "iPhone 8 Plus" | "iPhone 7" | "iPhone SE (1st generation)" | "iPad Pro (12.9-inch) (3rd generation)" | "iPad Pro (11-inch) (4th generation)" | "iPad (7th generation)" | "iPad (9th generation)" | "iPad Air (2nd generation)" | "iPad Air (4th generation)"; iosVersion?: "latest" | "latest-1"; screenOrientation?: ScreenOrientationPlain; }; } | { androidDeviceInfo: { deviceName: "Galaxy Note 10" | "Galaxy Note 10 Plus" | "Galaxy S10" | "Galaxy S10 Plus" | "Galaxy S20" | "Galaxy S22" | "Galaxy Tab S7" | "Pixel 3 XL" | "Pixel 4" | "Pixel 4 XL" | "Pixel 5" | "Sony Xperia 10 II" | "Pixel 6" | "Galaxy S20 Plus" | "Galaxy S21" | "Galaxy S21 Plus" | "Galaxy S21 Ultra" | "Galaxy S22 Plus" | "Galaxy Tab S8" | "Xiaomi Redmi Note 10 JE" | "Xiaomi Redmi Note 11" | "Xiaomi Redmi Note 11 Pro" | "Sony Xperia 1 II" | "Sony Xperia Ace II" | "Huawei P30 Lite"; version?: "latest" | "latest-1"; screenOrientation?: ScreenOrientationPlain; }; }>;
    visualGridOptions?: Record<string, any>;
    layoutBreakpoints?: boolean | Array<number>;
    disableBrowserFetching?: boolean;
    browser?: MaybeArray<{ name?: "chrome" | "firefox" | "edge" | "chrome-one-version-back" | "chrome-two-versions-back" | "firefox-one-version-back" | "firefox-two-versions-back" | "ie" | "ie10" | "edgechromium" | "edgelegacy" | "edgechromium-one-version-back" | "edgechromium-two-versions-back" | "safari" | "safari-earlyaccess" | "safari-one-version-back" | "safari-two-versions-back"; width: number; height: number; } | { chromeEmulationInfo: { deviceName: "Blackberry PlayBook" | "BlackBerry Z30" | "Galaxy A5" | "Galaxy Note 10" | "Galaxy Note 10 Plus" | "Galaxy Note 2" | "Galaxy Note 3" | "Galaxy Note 4" | "Galaxy Note 8" | "Galaxy Note 9" | "Galaxy S3" | "Galaxy S5" | "Galaxy S8" | "Galaxy S8 Plus" | "Galaxy S9" | "Galaxy S9 Plus" | "Galaxy S10" | "Galaxy S10 Plus" | "Galaxy S20" | "Galaxy S22" | "Galaxy Tab S7" | "iPad" | "iPad 6th Gen" | "iPad 7th Gen" | "iPad Air 2" | "iPad Mini" | "iPad Pro" | "iPhone 11" | "iPhone 11 Pro" | "iPhone 11 Pro Max" | "iPhone 4" | "iPhone 5/SE" | "iPhone 6/7/8" | "iPhone 6/7/8 Plus" | "iPhone X" | "iPhone XR" | "iPhone XS" | "iPhone XS Max" | "Kindle Fire HDX" | "Laptop with HiDPI screen" | "Laptop with MDPI screen" | "Laptop with touch" | "LG G6" | "LG Optimus L70" | "Microsoft Lumia 550" | "Microsoft Lumia 950" | "Nexus 10" | "Nexus 4" | "Nexus 5" | "Nexus 5X" | "Nexus 6" | "Nexus 6P" | "Nexus 7" | "Nokia Lumia 520" | "Nokia N9" | "OnePlus 7T" | "OnePlus 7T Pro" | "Pixel 2" | "Pixel 2 XL" | "Pixel 3" | "Pixel 3 XL" | "Pixel 4" | "Pixel 4 XL" | "Pixel 5" | "Sony Xperia 10 II" | "Huawei Mate 50 Pro" | "Huawei Matepad 11"; screenOrientation?: ScreenOrientationPlain; }; } | { iosDeviceInfo: { deviceName: "iPhone 11" | "iPhone 11 Pro" | "iPhone 11 Pro Max" | "iPhone X" | "iPhone XR" | "iPhone 14 Pro Max" | "iPhone 14" | "iPhone 13 Pro Max" | "iPhone 13 Pro" | "iPhone 13" | "iPhone 12 Pro Max" | "iPhone 12 Pro" | "iPhone 12" | "iPhone 12 mini" | "iPhone Xs" | "iPhone 8" | "iPhone 8 Plus" | "iPhone 7" | "iPhone SE (1st generation)" | "iPad Pro (12.9-inch) (3rd generation)" | "iPad Pro (11-inch) (4th generation)" | "iPad (7th generation)" | "iPad (9th generation)" | "iPad Air (2nd generation)" | "iPad Air (4th generation)"; iosVersion?: "latest" | "latest-1"; screenOrientation?: ScreenOrientationPlain; }; } | { androidDeviceInfo: { deviceName: "Galaxy Note 10" | "Galaxy Note 10 Plus" | "Galaxy S10" | "Galaxy S10 Plus" | "Galaxy S20" | "Galaxy S22" | "Galaxy Tab S7" | "Pixel 3 XL" | "Pixel 4" | "Pixel 4 XL" | "Pixel 5" | "Sony Xperia 10 II" | "Pixel 6" | "Galaxy S20 Plus" | "Galaxy S21" | "Galaxy S21 Plus" | "Galaxy S21 Ultra" | "Galaxy S22 Plus" | "Galaxy Tab S8" | "Xiaomi Redmi Note 10 JE" | "Xiaomi Redmi Note 11" | "Xiaomi Redmi Note 11 Pro" | "Sony Xperia 1 II" | "Sony Xperia Ace II" | "Huawei P30 Lite"; version?: "latest" | "latest-1"; screenOrientation?: ScreenOrientationPlain; }; } | { deviceName: DeviceName; screenOrientation?: ScreenOrientationPlain; name?: string; }>;
    batchId?: string;
    batchName?: string;
    batchSequence?: string;
    notifyOnCompletion?: boolean;
    batchSequenceName?: string;
    envName?: string;
    accessibilityValidation?: AccessibilityValidation;
    matchLevel?: "None" | "Layout1" | "Layout" | "Layout2" | "Content" | "IgnoreColors" | "Strict" | "Exact";
    ignoreCaret?: boolean;
    ignoreDisplacements?: boolean;
    useDom?: boolean;
    enablePatterns?: boolean;
    scriptHooks?: { beforeCaptureScreenshot: string; };
};
export type CypressTestResultsSummary = { getAllResults(): Array<{ getTestResults(): {
    getId(): string;
    setId(_id: string): void;
    getName(): string;
    setName(_name: string): void;
    getSecretToken(): string;
    setSecretToken(_secretToken: string): void;
    getStatus(): TestResultsStatus;
    setStatus(_status: TestResultsStatus): void;
    getAppName(): string;
    setAppName(_appName: string): void;
    getBatchName(): string;
    setBatchName(_batchName: string): void;
    getBatchId(): string;
    setBatchId(_batchId: string): void;
    getBranchName(): string;
    setBranchName(_branchName: string): void;
    getHostOS(): string;
    setHostOS(_hostOS: string): void;
    getHostApp(): string;
    setHostApp(_hostApp: string): void;
    getHostDisplaySize(): { getWidth(): number; setWidth(width: number): void; getHeight(): number; setHeight(height: number): void; };
    setHostDisplaySize(_hostDisplaySize: { width: number; height: number; }): void;
    getAccessibilityStatus(): { readonly status: "Passed" | "Failed"; readonly level: "AA" | "AAA"; readonly version: "WCAG_2_0" | "WCAG_2_1"; };
    setAccessibilityStatus(_accessibilityStatus: { readonly status: "Passed" | "Failed"; readonly level: "AA" | "AAA"; readonly version: "WCAG_2_0" | "WCAG_2_1"; }): void;
    getStartedAt(): Date;
    setStartedAt(_startedAt: string | Date): void;
    getDuration(): number;
    setDuration(_duration: number): void;
    getIsNew(): boolean;
    setIsNew(_isNew: boolean): void;
    getIsDifferent(): boolean;
    setIsDifferent(_isDifferent: boolean): void;
    getIsAborted(): boolean;
    setIsAborted(_isAborted: boolean): void;
    getAppUrls(): { getBatch(): string; setBatch(batch: string): void; getSession(): string; setSession(session: string): void; };
    setAppUrls(_appUrls: { readonly batch?: string; readonly session?: string; }): void;
    getApiUrls(): { getBatch(): string; setBatch(batch: string): void; getSession(): string; setSession(session: string): void; };
    setApiUrls(_apiUrls: { readonly batch?: string; readonly session?: string; }): void;
    getStepsInfo(): Array<{
        getName(): string;
        setName(value: string): void;
        getIsDifferent(): boolean;
        setIsDifferent(value: boolean): void;
        getHasBaselineImage(): boolean;
        setHasBaselineImage(value: boolean): void;
        getHasCurrentImage(): boolean;
        setHasCurrentImage(hasCurrentImage: boolean): void;
        getAppUrls(): { getStep(): string; setStep(step: string): void; getStepEditor(): string; setStepEditor(stepEditor: string): void; };
        setAppUrls(appUrls: { readonly step?: string; readonly stepEditor?: string; }): void;
        getApiUrls(): {
            getBaselineImage(): string;
            setBaselineImage(setBaselineImage: string): void;
            getCurrentImage(): string;
            setCurrentImage(currentImage: string): void;
            getCheckpointImage(): string;
            setCheckpointImage(checkpointImage: string): void;
            getCheckpointImageThumbnail(): string;
            setCheckpointImageThumbnail(checkpointImageThumbnail: string): void;
            getDiffImage(): string;
            setDiffImage(diffImage: string): void;
        };
        setApiUrls(apiUrls: {
            readonly baselineImage?: string;
            readonly currentImage?: string;
            readonly checkpointImage?: string;
            readonly checkpointImageThumbnail?: string;
            readonly diffImage?: string;
        }): void;
        getRenderId(): Array<string>;
        setRenderId(renderId: Array<string>): void;
    }>;
    setStepsInfo(_stepInfo: Array<{
        readonly name?: string;
        readonly isDifferent?: boolean;
        readonly hasBaselineImage?: boolean;
        readonly hasCurrentImage?: boolean;
        readonly appUrls?: { readonly step?: string; readonly stepEditor?: string; };
        readonly apiUrls?: {
            readonly baselineImage?: string;
            readonly currentImage?: string;
            readonly checkpointImage?: string;
            readonly checkpointImageThumbnail?: string;
            readonly diffImage?: string;
        };
        readonly renderId?: Array<string>;
    }>): void;
    getSteps(): number;
    setSteps(_steps: number): void;
    getMatches(): number;
    setMatches(_matches: number): void;
    getMismatches(): number;
    setMismatches(_mismatches: number): void;
    getMissing(): number;
    setMissing(_missing: number): void;
    getExactMatches(): number;
    setExactMatches(_exactMatches: number): void;
    getStrictMatches(): number;
    setStrictMatches(_strictMatches: number): void;
    getContentMatches(): number;
    setContentMatches(_contentMatches: number): void;
    getLayoutMatches(): number;
    setLayoutMatches(_layoutMatches: number): void;
    getNoneMatches(): number;
    setNoneMatches(_noneMatches: number): void;
    getUrl(): string;
    setUrl(_url: string): void;
    isPassed(): boolean;
    delete(): Promise<void>;
    deleteSession(): Promise<void>;
}; getException(): Error; getBrowserInfo(): { name?: "chrome" | "firefox" | "edge" | "chrome-one-version-back" | "chrome-two-versions-back" | "firefox-one-version-back" | "firefox-two-versions-back" | "ie" | "ie10" | "edgechromium" | "edgelegacy" | "edgechromium-one-version-back" | "edgechromium-two-versions-back" | "safari" | "safari-earlyaccess" | "safari-one-version-back" | "safari-two-versions-back"; width: number; height: number; } | { chromeEmulationInfo: { deviceName: "Blackberry PlayBook" | "BlackBerry Z30" | "Galaxy A5" | "Galaxy Note 10" | "Galaxy Note 10 Plus" | "Galaxy Note 2" | "Galaxy Note 3" | "Galaxy Note 4" | "Galaxy Note 8" | "Galaxy Note 9" | "Galaxy S3" | "Galaxy S5" | "Galaxy S8" | "Galaxy S8 Plus" | "Galaxy S9" | "Galaxy S9 Plus" | "Galaxy S10" | "Galaxy S10 Plus" | "Galaxy S20" | "Galaxy S22" | "Galaxy Tab S7" | "iPad" | "iPad 6th Gen" | "iPad 7th Gen" | "iPad Air 2" | "iPad Mini" | "iPad Pro" | "iPhone 11" | "iPhone 11 Pro" | "iPhone 11 Pro Max" | "iPhone 4" | "iPhone 5/SE" | "iPhone 6/7/8" | "iPhone 6/7/8 Plus" | "iPhone X" | "iPhone XR" | "iPhone XS" | "iPhone XS Max" | "Kindle Fire HDX" | "Laptop with HiDPI screen" | "Laptop with MDPI screen" | "Laptop with touch" | "LG G6" | "LG Optimus L70" | "Microsoft Lumia 550" | "Microsoft Lumia 950" | "Nexus 10" | "Nexus 4" | "Nexus 5" | "Nexus 5X" | "Nexus 6" | "Nexus 6P" | "Nexus 7" | "Nokia Lumia 520" | "Nokia N9" | "OnePlus 7T" | "OnePlus 7T Pro" | "Pixel 2" | "Pixel 2 XL" | "Pixel 3" | "Pixel 3 XL" | "Pixel 4" | "Pixel 4 XL" | "Pixel 5" | "Sony Xperia 10 II" | "Huawei Mate 50 Pro" | "Huawei Matepad 11"; screenOrientation?: ScreenOrientationPlain; }; } | { deviceName: "Blackberry PlayBook" | "BlackBerry Z30" | "Galaxy A5" | "Galaxy Note 10" | "Galaxy Note 10 Plus" | "Galaxy Note 2" | "Galaxy Note 3" | "Galaxy Note 4" | "Galaxy Note 8" | "Galaxy Note 9" | "Galaxy S3" | "Galaxy S5" | "Galaxy S8" | "Galaxy S8 Plus" | "Galaxy S9" | "Galaxy S9 Plus" | "Galaxy S10" | "Galaxy S10 Plus" | "Galaxy S20" | "Galaxy S22" | "Galaxy Tab S7" | "iPad" | "iPad 6th Gen" | "iPad 7th Gen" | "iPad Air 2" | "iPad Mini" | "iPad Pro" | "iPhone 11" | "iPhone 11 Pro" | "iPhone 11 Pro Max" | "iPhone 4" | "iPhone 5/SE" | "iPhone 6/7/8" | "iPhone 6/7/8 Plus" | "iPhone X" | "iPhone XR" | "iPhone XS" | "iPhone XS Max" | "Kindle Fire HDX" | "Laptop with HiDPI screen" | "Laptop with MDPI screen" | "Laptop with touch" | "LG G6" | "LG Optimus L70" | "Microsoft Lumia 550" | "Microsoft Lumia 950" | "Nexus 10" | "Nexus 4" | "Nexus 5" | "Nexus 5X" | "Nexus 6" | "Nexus 6P" | "Nexus 7" | "Nokia Lumia 520" | "Nokia N9" | "OnePlus 7T" | "OnePlus 7T Pro" | "Pixel 2" | "Pixel 2 XL" | "Pixel 3" | "Pixel 3 XL" | "Pixel 4" | "Pixel 4 XL" | "Pixel 5" | "Sony Xperia 10 II" | "Huawei Mate 50 Pro" | "Huawei Matepad 11"; screenOrientation?: ScreenOrientationPlain; } | { iosDeviceInfo: { deviceName: "iPhone 11" | "iPhone 11 Pro" | "iPhone 11 Pro Max" | "iPhone X" | "iPhone XR" | "iPhone 14 Pro Max" | "iPhone 14" | "iPhone 13 Pro Max" | "iPhone 13 Pro" | "iPhone 13" | "iPhone 12 Pro Max" | "iPhone 12 Pro" | "iPhone 12" | "iPhone 12 mini" | "iPhone Xs" | "iPhone 8" | "iPhone 8 Plus" | "iPhone 7" | "iPhone SE (1st generation)" | "iPad Pro (12.9-inch) (3rd generation)" | "iPad Pro (11-inch) (4th generation)" | "iPad (7th generation)" | "iPad (9th generation)" | "iPad Air (2nd generation)" | "iPad Air (4th generation)"; iosVersion?: "latest" | "latest-1"; screenOrientation?: ScreenOrientationPlain; }; } | { androidDeviceInfo: { deviceName: "Galaxy Note 10" | "Galaxy Note 10 Plus" | "Galaxy S10" | "Galaxy S10 Plus" | "Galaxy S20" | "Galaxy S22" | "Galaxy Tab S7" | "Pixel 3 XL" | "Pixel 4" | "Pixel 4 XL" | "Pixel 5" | "Sony Xperia 10 II" | "Pixel 6" | "Galaxy S20 Plus" | "Galaxy S21" | "Galaxy S21 Plus" | "Galaxy S21 Ultra" | "Galaxy S22 Plus" | "Galaxy Tab S8" | "Xiaomi Redmi Note 10 JE" | "Xiaomi Redmi Note 11" | "Xiaomi Redmi Note 11 Pro" | "Sony Xperia 1 II" | "Sony Xperia Ace II" | "Huawei P30 Lite"; version?: "latest" | "latest-1"; screenOrientation?: ScreenOrientationPlain; }; }; }>; [Symbol.iterator](): Iterator<{ getTestResults(): {
    getId(): string;
    setId(_id: string): void;
    getName(): string;
    setName(_name: string): void;
    getSecretToken(): string;
    setSecretToken(_secretToken: string): void;
    getStatus(): TestResultsStatus;
    setStatus(_status: TestResultsStatus): void;
    getAppName(): string;
    setAppName(_appName: string): void;
    getBatchName(): string;
    setBatchName(_batchName: string): void;
    getBatchId(): string;
    setBatchId(_batchId: string): void;
    getBranchName(): string;
    setBranchName(_branchName: string): void;
    getHostOS(): string;
    setHostOS(_hostOS: string): void;
    getHostApp(): string;
    setHostApp(_hostApp: string): void;
    getHostDisplaySize(): { getWidth(): number; setWidth(width: number): void; getHeight(): number; setHeight(height: number): void; };
    setHostDisplaySize(_hostDisplaySize: { width: number; height: number; }): void;
    getAccessibilityStatus(): { readonly status: "Passed" | "Failed"; readonly level: "AA" | "AAA"; readonly version: "WCAG_2_0" | "WCAG_2_1"; };
    setAccessibilityStatus(_accessibilityStatus: { readonly status: "Passed" | "Failed"; readonly level: "AA" | "AAA"; readonly version: "WCAG_2_0" | "WCAG_2_1"; }): void;
    getStartedAt(): Date;
    setStartedAt(_startedAt: string | Date): void;
    getDuration(): number;
    setDuration(_duration: number): void;
    getIsNew(): boolean;
    setIsNew(_isNew: boolean): void;
    getIsDifferent(): boolean;
    setIsDifferent(_isDifferent: boolean): void;
    getIsAborted(): boolean;
    setIsAborted(_isAborted: boolean): void;
    getAppUrls(): { getBatch(): string; setBatch(batch: string): void; getSession(): string; setSession(session: string): void; };
    setAppUrls(_appUrls: { readonly batch?: string; readonly session?: string; }): void;
    getApiUrls(): { getBatch(): string; setBatch(batch: string): void; getSession(): string; setSession(session: string): void; };
    setApiUrls(_apiUrls: { readonly batch?: string; readonly session?: string; }): void;
    getStepsInfo(): Array<{
        getName(): string;
        setName(value: string): void;
        getIsDifferent(): boolean;
        setIsDifferent(value: boolean): void;
        getHasBaselineImage(): boolean;
        setHasBaselineImage(value: boolean): void;
        getHasCurrentImage(): boolean;
        setHasCurrentImage(hasCurrentImage: boolean): void;
        getAppUrls(): { getStep(): string; setStep(step: string): void; getStepEditor(): string; setStepEditor(stepEditor: string): void; };
        setAppUrls(appUrls: { readonly step?: string; readonly stepEditor?: string; }): void;
        getApiUrls(): {
            getBaselineImage(): string;
            setBaselineImage(setBaselineImage: string): void;
            getCurrentImage(): string;
            setCurrentImage(currentImage: string): void;
            getCheckpointImage(): string;
            setCheckpointImage(checkpointImage: string): void;
            getCheckpointImageThumbnail(): string;
            setCheckpointImageThumbnail(checkpointImageThumbnail: string): void;
            getDiffImage(): string;
            setDiffImage(diffImage: string): void;
        };
        setApiUrls(apiUrls: {
            readonly baselineImage?: string;
            readonly currentImage?: string;
            readonly checkpointImage?: string;
            readonly checkpointImageThumbnail?: string;
            readonly diffImage?: string;
        }): void;
        getRenderId(): Array<string>;
        setRenderId(renderId: Array<string>): void;
    }>;
    setStepsInfo(_stepInfo: Array<{
        readonly name?: string;
        readonly isDifferent?: boolean;
        readonly hasBaselineImage?: boolean;
        readonly hasCurrentImage?: boolean;
        readonly appUrls?: { readonly step?: string; readonly stepEditor?: string; };
        readonly apiUrls?: {
            readonly baselineImage?: string;
            readonly currentImage?: string;
            readonly checkpointImage?: string;
            readonly checkpointImageThumbnail?: string;
            readonly diffImage?: string;
        };
        readonly renderId?: Array<string>;
    }>): void;
    getSteps(): number;
    setSteps(_steps: number): void;
    getMatches(): number;
    setMatches(_matches: number): void;
    getMismatches(): number;
    setMismatches(_mismatches: number): void;
    getMissing(): number;
    setMissing(_missing: number): void;
    getExactMatches(): number;
    setExactMatches(_exactMatches: number): void;
    getStrictMatches(): number;
    setStrictMatches(_strictMatches: number): void;
    getContentMatches(): number;
    setContentMatches(_contentMatches: number): void;
    getLayoutMatches(): number;
    setLayoutMatches(_layoutMatches: number): void;
    getNoneMatches(): number;
    setNoneMatches(_noneMatches: number): void;
    getUrl(): string;
    setUrl(_url: string): void;
    isPassed(): boolean;
    delete(): Promise<void>;
    deleteSession(): Promise<void>;
}; getException(): Error; getBrowserInfo(): { name?: "chrome" | "firefox" | "edge" | "chrome-one-version-back" | "chrome-two-versions-back" | "firefox-one-version-back" | "firefox-two-versions-back" | "ie" | "ie10" | "edgechromium" | "edgelegacy" | "edgechromium-one-version-back" | "edgechromium-two-versions-back" | "safari" | "safari-earlyaccess" | "safari-one-version-back" | "safari-two-versions-back"; width: number; height: number; } | { chromeEmulationInfo: { deviceName: "Blackberry PlayBook" | "BlackBerry Z30" | "Galaxy A5" | "Galaxy Note 10" | "Galaxy Note 10 Plus" | "Galaxy Note 2" | "Galaxy Note 3" | "Galaxy Note 4" | "Galaxy Note 8" | "Galaxy Note 9" | "Galaxy S3" | "Galaxy S5" | "Galaxy S8" | "Galaxy S8 Plus" | "Galaxy S9" | "Galaxy S9 Plus" | "Galaxy S10" | "Galaxy S10 Plus" | "Galaxy S20" | "Galaxy S22" | "Galaxy Tab S7" | "iPad" | "iPad 6th Gen" | "iPad 7th Gen" | "iPad Air 2" | "iPad Mini" | "iPad Pro" | "iPhone 11" | "iPhone 11 Pro" | "iPhone 11 Pro Max" | "iPhone 4" | "iPhone 5/SE" | "iPhone 6/7/8" | "iPhone 6/7/8 Plus" | "iPhone X" | "iPhone XR" | "iPhone XS" | "iPhone XS Max" | "Kindle Fire HDX" | "Laptop with HiDPI screen" | "Laptop with MDPI screen" | "Laptop with touch" | "LG G6" | "LG Optimus L70" | "Microsoft Lumia 550" | "Microsoft Lumia 950" | "Nexus 10" | "Nexus 4" | "Nexus 5" | "Nexus 5X" | "Nexus 6" | "Nexus 6P" | "Nexus 7" | "Nokia Lumia 520" | "Nokia N9" | "OnePlus 7T" | "OnePlus 7T Pro" | "Pixel 2" | "Pixel 2 XL" | "Pixel 3" | "Pixel 3 XL" | "Pixel 4" | "Pixel 4 XL" | "Pixel 5" | "Sony Xperia 10 II" | "Huawei Mate 50 Pro" | "Huawei Matepad 11"; screenOrientation?: ScreenOrientationPlain; }; } | { deviceName: "Blackberry PlayBook" | "BlackBerry Z30" | "Galaxy A5" | "Galaxy Note 10" | "Galaxy Note 10 Plus" | "Galaxy Note 2" | "Galaxy Note 3" | "Galaxy Note 4" | "Galaxy Note 8" | "Galaxy Note 9" | "Galaxy S3" | "Galaxy S5" | "Galaxy S8" | "Galaxy S8 Plus" | "Galaxy S9" | "Galaxy S9 Plus" | "Galaxy S10" | "Galaxy S10 Plus" | "Galaxy S20" | "Galaxy S22" | "Galaxy Tab S7" | "iPad" | "iPad 6th Gen" | "iPad 7th Gen" | "iPad Air 2" | "iPad Mini" | "iPad Pro" | "iPhone 11" | "iPhone 11 Pro" | "iPhone 11 Pro Max" | "iPhone 4" | "iPhone 5/SE" | "iPhone 6/7/8" | "iPhone 6/7/8 Plus" | "iPhone X" | "iPhone XR" | "iPhone XS" | "iPhone XS Max" | "Kindle Fire HDX" | "Laptop with HiDPI screen" | "Laptop with MDPI screen" | "Laptop with touch" | "LG G6" | "LG Optimus L70" | "Microsoft Lumia 550" | "Microsoft Lumia 950" | "Nexus 10" | "Nexus 4" | "Nexus 5" | "Nexus 5X" | "Nexus 6" | "Nexus 6P" | "Nexus 7" | "Nokia Lumia 520" | "Nokia N9" | "OnePlus 7T" | "OnePlus 7T Pro" | "Pixel 2" | "Pixel 2 XL" | "Pixel 3" | "Pixel 3 XL" | "Pixel 4" | "Pixel 4 XL" | "Pixel 5" | "Sony Xperia 10 II" | "Huawei Mate 50 Pro" | "Huawei Matepad 11"; screenOrientation?: ScreenOrientationPlain; } | { iosDeviceInfo: { deviceName: "iPhone 11" | "iPhone 11 Pro" | "iPhone 11 Pro Max" | "iPhone X" | "iPhone XR" | "iPhone 14 Pro Max" | "iPhone 14" | "iPhone 13 Pro Max" | "iPhone 13 Pro" | "iPhone 13" | "iPhone 12 Pro Max" | "iPhone 12 Pro" | "iPhone 12" | "iPhone 12 mini" | "iPhone Xs" | "iPhone 8" | "iPhone 8 Plus" | "iPhone 7" | "iPhone SE (1st generation)" | "iPad Pro (12.9-inch) (3rd generation)" | "iPad Pro (11-inch) (4th generation)" | "iPad (7th generation)" | "iPad (9th generation)" | "iPad Air (2nd generation)" | "iPad Air (4th generation)"; iosVersion?: "latest" | "latest-1"; screenOrientation?: ScreenOrientationPlain; }; } | { androidDeviceInfo: { deviceName: "Galaxy Note 10" | "Galaxy Note 10 Plus" | "Galaxy S10" | "Galaxy S10 Plus" | "Galaxy S20" | "Galaxy S22" | "Galaxy Tab S7" | "Pixel 3 XL" | "Pixel 4" | "Pixel 4 XL" | "Pixel 5" | "Sony Xperia 10 II" | "Pixel 6" | "Galaxy S20 Plus" | "Galaxy S21" | "Galaxy S21 Plus" | "Galaxy S21 Ultra" | "Galaxy S22 Plus" | "Galaxy Tab S8" | "Xiaomi Redmi Note 10 JE" | "Xiaomi Redmi Note 11" | "Xiaomi Redmi Note 11 Pro" | "Sony Xperia 1 II" | "Sony Xperia Ace II" | "Huawei P30 Lite"; version?: "latest" | "latest-1"; screenOrientation?: ScreenOrientationPlain; }; }; }, any, undefined>; };
export type EyesPluginConfig = {
    tapDirPath: string;
    tapFileName: string;
    eyesIsDisabled: boolean;
    eyesBrowser: any;
    eyesLayoutBreakpoints: any;
    eyesFailCypressOnDiff: boolean;
    eyesDisableBrowserFetching: boolean;
    eyesTestConcurrency: number;
    eyesWaitBeforeCapture: number;
    eyesPort?: number;
    eyesIsGlobalHooksSupported?: boolean;
    eyesRemoveDuplicateTests?: boolean;
    universalDebug?: boolean;
};
declare const _default: (pluginInitArgs: Cypress.ConfigOptions | NodeJS.Module) => Cypress.ConfigOptions | NodeJS.Module | (() => Promise<void>);
export default _default;
