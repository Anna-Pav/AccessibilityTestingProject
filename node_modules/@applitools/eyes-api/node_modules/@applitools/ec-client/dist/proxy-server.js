"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeServer = void 0;
const http_1 = require("http");
const logger_1 = require("@applitools/logger");
const queue_1 = require("./queue");
const manager_1 = require("./tunnels/manager");
const manager_client_1 = require("./tunnels/manager-client");
const req_proxy_1 = require("./req-proxy");
const utils = __importStar(require("@applitools/utils"));
const RETRY_BACKOFF = [
    ...Array(5).fill(2000),
    ...Array(4).fill(5000),
    10000, // all next tries with delay 10s
];
const RETRY_ERROR_CODES = ['CONCURRENCY_LIMIT_REACHED', 'NO_AVAILABLE_DRIVER_POD'];
async function makeServer({ settings, logger }) {
    var _a, _b;
    const serverLogger = logger ? logger.extend({ label: 'ec-client' }) : (0, logger_1.makeLogger)({ label: 'ec-client', colors: true });
    const req = (0, req_proxy_1.makeReqProxy)({
        targetUrl: settings.serverUrl,
        proxy: settings.proxy,
        retry: {
            validate: async ({ response, error }) => {
                if (error)
                    return !utils.types.instanceOf(error, 'AbortError');
                if (response)
                    return response.status >= 500 && !utils.types.has(await response.clone().json(), 'value');
                return false;
            },
            limit: 10,
            timeout: 5000,
        },
    });
    const tunnelManager = ((_a = settings.tunnel) === null || _a === void 0 ? void 0 : _a.serverUrl)
        ? await (0, manager_1.makeTunnelManager)({ settings: settings.tunnel, logger: serverLogger })
        : await (0, manager_client_1.makeTunnelManagerClient)({ settings: settings.tunnel });
    const sessions = new Map();
    const queues = new Map();
    const server = (0, http_1.createServer)(async (request, response) => {
        var _a, _b, _c, _d;
        const url = request.url;
        const requestLogger = serverLogger.extend({
            tags: { request: `[${request.method}] ${request.url}`, requestId: utils.general.guid() },
        });
        try {
            if (request.method === 'POST' && /^\/session\/?$/.test(url)) {
                return await createSession({ request, response, logger: requestLogger });
            }
            else if (request.method === 'DELETE' && /^\/session\/[^\/]+\/?$/.test(url)) {
                return await deleteSession({ request, response, logger: requestLogger });
            }
            else if (request.method === 'POST' && /^\/session\/[^\/]+\/element\/?$/.test(url)) {
                requestLogger.log('Inspecting element lookup request to collect self-healing metadata');
                const proxyResponse = await req(url, { io: { request, response, handle: false }, logger: requestLogger });
                const responseBody = await proxyResponse.json();
                if ((_b = (_a = responseBody === null || responseBody === void 0 ? void 0 : responseBody.appliCustomData) === null || _a === void 0 ? void 0 : _a.selfHealing) === null || _b === void 0 ? void 0 : _b.successfulSelector) {
                    requestLogger.log('Self-healed locators detected', responseBody.appliCustomData.selfHealing);
                    const session = sessions.get(getSessionId(url));
                    (_c = session.metadata) !== null && _c !== void 0 ? _c : (session.metadata = []);
                    session.metadata.push(responseBody.appliCustomData.selfHealing);
                }
                else {
                    requestLogger.log('No self-healing metadata found');
                }
                response
                    .writeHead(proxyResponse.status, Object.fromEntries(proxyResponse.headers.entries()))
                    .end(JSON.stringify(responseBody));
            }
            else if (request.method === 'GET' && /^\/session\/[^\/]+\/applitools\/metadata?$/.test(url)) {
                const session = sessions.get(getSessionId(url));
                requestLogger.log('Session metadata requested, returning', session.metadata);
                response.writeHead(200).end(JSON.stringify({ value: (_d = session.metadata) !== null && _d !== void 0 ? _d : [] }));
                session.metadata = [];
            }
            else {
                requestLogger.log('Passthrough request');
                return await req(url, { io: { request, response }, logger: requestLogger });
            }
        }
        catch (err) {
            requestLogger.error(`Error during processing request:`, err);
            if (!response.writableEnded) {
                response
                    .writeHead(500)
                    .end(JSON.stringify({ value: { error: 'internal proxy server error', message: err.message, stacktrace: '' } }));
            }
        }
        finally {
            requestLogger.log(`Request was responded with status ${response.statusCode}`);
        }
    });
    server.listen({ port: (_b = settings.port) !== null && _b !== void 0 ? _b : 0, hostname: 'localhost' });
    return new Promise((resolve, reject) => {
        server.on('listening', () => {
            const address = server.address();
            serverLogger.log(`Proxy server has started on port ${address.port}`);
            resolve({
                url: `http://localhost:${address.port}`,
                port: address.port,
                close: () => server.close(),
            });
        });
        server.on('error', async (err) => {
            serverLogger.fatal('Error starting proxy server', err);
            reject(err);
        });
    });
    async function createSession({ request, response, logger, }) {
        var _a, _b, _c;
        const requestBody = await utils.streams.toJSON(request);
        logger.log(`Request was intercepted with body:`, requestBody);
        const capabilities = (_b = (_a = requestBody.capabilities) === null || _a === void 0 ? void 0 : _a.alwaysMatch) !== null && _b !== void 0 ? _b : requestBody.desiredCapabilities;
        const options = {
            ...settings.capabilities,
            ...capabilities === null || capabilities === void 0 ? void 0 : capabilities['applitools:options'],
            ...(capabilities &&
                Object.entries(capabilities).reduce((capabilities, [key, value]) => {
                    if (key.startsWith('applitools:')) {
                        capabilities[key.replace(/^applitools:/, '')] = value;
                    }
                    return capabilities;
                }, {})),
        };
        const session = {
            credentials: { eyesServerUrl: options.eyesServerUrl, apiKey: options.apiKey },
        };
        if (options.tunnel) {
            session.tunnels = await tunnelManager.acquire(session.credentials);
            session.tunnels.forEach((tunnel, index) => {
                options[`x-tunnel-id-${index}`] = tunnel.tunnelId;
            });
        }
        const applitoolsCapabilities = Object.fromEntries(Object.entries(options).map(([key, value]) => [`applitools:${key}`, value]));
        if (requestBody.capabilities) {
            requestBody.capabilities.alwaysMatch = { ...(_c = requestBody.capabilities) === null || _c === void 0 ? void 0 : _c.alwaysMatch, ...applitoolsCapabilities };
        }
        if (requestBody.desiredCapabilities) {
            requestBody.desiredCapabilities = { ...requestBody.desiredCapabilities, ...applitoolsCapabilities };
        }
        logger.log('Request body has modified:', requestBody);
        const queueKey = JSON.stringify(session.credentials);
        let queue = queues.get(queueKey);
        if (!queue) {
            queue = (0, queue_1.makeQueue)({ logger: logger.extend({ tags: { queue: queueKey } }) });
            queues.set(queueKey, queue);
        }
        request.socket.on('close', () => queue.cancel(task));
        await queue.run(task);
        async function task(signal, attempt = 1) {
            var _a, _b, _c;
            var _d;
            // do not start the task if it is already aborted
            if (signal.aborted)
                return;
            const proxyResponse = await req(request.url, {
                body: requestBody,
                io: { request, response, handle: false },
                // TODO uncomment when we can throw different abort reasons for task cancelation and timeout abortion
                // signal,
                logger,
            });
            const responseBody = await proxyResponse.json();
            logger.log(`Response was intercepted with body:`, responseBody);
            if (RETRY_ERROR_CODES.includes((_b = (_a = responseBody.value) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.appliErrorCode)) {
                queue.cork();
                // after query is corked the task might be aborted
                if (signal.aborted)
                    return;
                await utils.general.sleep(RETRY_BACKOFF[Math.min(attempt, RETRY_BACKOFF.length - 1)]);
                logger.log(`Attempt (${attempt}) to create session was failed with applitools status code:`, responseBody.value.data.appliErrorCode);
                return task(signal, attempt + 1);
            }
            else {
                queue.uncork();
                if (responseBody.value) {
                    sessions.set(responseBody.value.sessionId, session);
                    (_c = (_d = responseBody.value).capabilities) !== null && _c !== void 0 ? _c : (_d.capabilities = {});
                    responseBody.value.capabilities['applitools:isECClient'] = true;
                    if (proxyResponse.headers.has('content-length')) {
                        proxyResponse.headers.set('content-length', Buffer.byteLength(JSON.stringify(responseBody)).toString());
                    }
                }
                response
                    .writeHead(proxyResponse.status, Object.fromEntries(proxyResponse.headers.entries()))
                    .end(JSON.stringify(responseBody));
                return;
            }
        }
    }
    async function deleteSession({ request, response, logger, }) {
        const url = request.url;
        const sessionId = getSessionId(url);
        logger.log(`Request was intercepted with sessionId:`, sessionId);
        await req(url, { io: { request, response }, logger });
        const session = sessions.get(sessionId);
        if (session.tunnels) {
            await tunnelManager.release(session.tunnels);
            logger.log(`Tunnels with id ${session.tunnels.map(tunnel => tunnel.tunnelId)} was released for session with id ${sessionId}`);
        }
        sessions.delete(sessionId);
    }
}
exports.makeServer = makeServer;
function getSessionId(requestUrl) {
    var _a;
    return (_a = requestUrl === null || requestUrl === void 0 ? void 0 : requestUrl.split('/')[2]) !== null && _a !== void 0 ? _a : '';
}
