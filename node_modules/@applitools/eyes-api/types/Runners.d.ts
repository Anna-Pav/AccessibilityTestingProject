import { CoreSpec, CoreEyes, CoreConfig, SpecType } from './Core';
import { type Logger } from '@applitools/logger';
import { RunnerOptions, RunnerOptionsFluent } from './input/RunnerOptions';
import { TestResultsSummaryData } from './output/TestResultsSummary';
import { Eyes } from './Eyes';
export declare abstract class EyesRunner {
    protected _spec?: CoreSpec;
    private _manager?;
    private _eyes;
    /** @internal */
    abstract get config(): {
        type: 'classic' | 'ufg';
    };
    /** @internal */
    attach<TSpec extends SpecType = SpecType>(eyes: Eyes<TSpec>, spec: CoreSpec<TSpec>): void;
    /** @internal */
    openEyes<TSpec extends SpecType = SpecType>(options: {
        target: TSpec['driver'];
        config?: CoreConfig<TSpec>;
        logger?: Logger;
        on?: (name: string, data?: Record<string, any>) => void;
    }): Promise<CoreEyes<TSpec>>;
    getAllTestResults(throwErr?: boolean): Promise<TestResultsSummaryData>;
}
export declare class VisualGridRunner extends EyesRunner {
    private _testConcurrency?;
    private _legacyConcurrency?;
    constructor(options?: RunnerOptions);
    /** @deprecated */
    constructor(options?: RunnerOptionsFluent);
    /** @deprecated */
    constructor(legacyConcurrency?: number);
    /** @internal */
    get config(): {
        type: "ufg";
        concurrency: number | undefined;
        legacyConcurrency: number | undefined;
    };
    get testConcurrency(): number | undefined;
    /** @deprecated */
    get legacyConcurrency(): number | undefined;
    /** @deprecated */
    getConcurrentSessions(): number | undefined;
}
export declare class ClassicRunner extends EyesRunner {
    /** @internal */
    get config(): {
        type: "classic";
    };
}
