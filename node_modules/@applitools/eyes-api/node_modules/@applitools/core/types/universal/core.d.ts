import type { Core, EyesManager, Eyes } from '../types';
import type { ClientSocket, Ref } from './types';
import type { SpecType, SpecDriver } from '@applitools/driver';
import { type Socket } from '@applitools/socket';
import { WebSocket } from 'ws';
export declare function makeCore<TSpec extends SpecType, TType extends 'classic' | 'ufg'>(options: {
    agentId: string;
    spec: 'webdriver' | SpecDriver<TSpec>;
}): Core<TSpec, TType>;
export declare function makeManager<TSpec extends SpecType, TType extends 'classic' | 'ufg'>({ socket, manager, }: {
    socket: ClientSocket<TSpec, TType>;
    manager: Ref<EyesManager<TSpec, TType>>;
}): EyesManager<TSpec, TType>;
export declare function makeEyes<TSpec extends SpecType, TType extends 'classic' | 'ufg'>({ socket, eyes, }: {
    socket: ClientSocket<TSpec, TType>;
    eyes: Ref<Eyes<TSpec, TType>>;
}): Eyes<TSpec, TType>;
export declare function makeClientSocket<TSpec extends SpecType>({ agentId, spec, }: {
    agentId: string;
    spec: 'webdriver' | SpecDriver<TSpec>;
}): Promise<ClientSocket<TSpec, 'classic' | 'ufg'> & Socket<WebSocket>>;
