"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeClientSocket = exports.makeEyes = exports.makeManager = exports.makeCore = void 0;
const socket_1 = require("@applitools/socket");
const ws_1 = require("ws");
const core_server_1 = require("./core-server");
const utils = __importStar(require("@applitools/utils"));
//TODO add refer and sanitizing support, solve types issues
function makeCore(options) {
    const socketPromise = makeClientSocket(options);
    return {
        async getAccountInfo(options) {
            const socket = await socketPromise;
            return socket.request('Core.getAccountInfo', options);
        },
        async getViewportSize(options) {
            const socket = await socketPromise;
            return socket.request('Core.getViewportSize', options);
        },
        async setViewportSize(options) {
            const socket = await socketPromise;
            return socket.request('Core.setViewportSize', options);
        },
        async locate(options) {
            const socket = await socketPromise;
            return socket.request('Core.locate', options);
        },
        async locateText(options) {
            const socket = await socketPromise;
            return socket.request('Core.locateText', options);
        },
        async extractText(options) {
            const socket = await socketPromise;
            return socket.request('Core.extractText', options);
        },
        async openEyes(options) {
            const socket = await socketPromise;
            const eyes = await socket.request('Core.openEyes', options);
            return makeEyes({ socket, eyes });
        },
        async makeManager(options) {
            const socket = await socketPromise;
            const manager = await socket.request('Core.makeManager', options);
            return makeManager({ socket, manager });
        },
        async makeECClient(options) {
            const socket = await socketPromise;
            return socket.request('Core.makeECClient', options);
        },
        async closeBatch(options) {
            const socket = await socketPromise;
            return socket.request('Core.closeBatch', options);
        },
        async deleteTest(options) {
            const socket = await socketPromise;
            return socket.request('Core.deleteTest', options);
        },
        async logEvent(options) {
            const socket = await socketPromise;
            return socket.request('Core.logEvent', options);
        },
    };
}
exports.makeCore = makeCore;
function makeManager({ socket, manager, }) {
    return {
        async openEyes(options) {
            const eyes = await socket.request('EyesManager.openEyes', { ...options, manager });
            return makeEyes({ socket, eyes });
        },
        async getResults(options) {
            return socket.request('EyesManager.getResults', { ...options, manager });
        },
    };
}
exports.makeManager = makeManager;
function makeEyes({ socket, eyes, }) {
    return {
        test: null,
        running: null,
        getBaseEyes() {
            return null;
        },
        getTypedEyes() {
            return null;
        },
        async check(options) {
            return socket.request('Eyes.check', { ...options, eyes });
        },
        async checkAndClose(options) {
            return socket.request('Eyes.checkAndClose', { ...options, eyes });
        },
        async close(options) {
            return socket.request('Eyes.close', { ...options, eyes });
        },
        async abort(options) {
            return socket.request('Eyes.abort', { ...options, eyes });
        },
        async getResults(options) {
            return socket.request('Eyes.getResults', { ...options, eyes });
        },
    };
}
exports.makeEyes = makeEyes;
async function makeClientSocket({ agentId, spec, }) {
    const { port } = await (0, core_server_1.makeCoreServer)();
    const socket = (0, socket_1.makeSocket)(new ws_1.WebSocket(`ws://localhost:${port}/eyes`), {
        transport: 'ws',
    });
    socket.emit('Core.makeCore', {
        agentId,
        cwd: process.cwd(),
        spec: utils.types.isString(spec) ? spec : Object.keys(spec),
    });
    if (!utils.types.isString(spec)) {
        Object.entries(spec).forEach(([name, command]) => {
            socket.command(`Driver.${name}`, args => command(...args));
        });
    }
    return socket;
}
exports.makeClientSocket = makeClientSocket;
